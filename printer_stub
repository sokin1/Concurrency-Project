_Monitor Printer {              // chose one of the two kinds of type constructor
  struct PrintBuffer {
    Voter::States state;
    bool vote;
    int numBlocked;
    bool buffered;
  };

  unsigned int voter;
  PrintBuffer *buffer;

  void flush();
  void flush_finish( unsigned int id, bool vote );
  public:
    Printer( unsigned int voters );
    void print( unsigned int id, Voter::States state );
    void print( unsigned int id, Voter::States state, bool vote );
    void print( unsigned int id, Voter::States state, unsigned int numBlocked );
    ~Printer();
};


Printer::Printer( unsigned int voters ) {
    voter = voters;
    buffer = new PrintBuffer[voters];
    for( int i = 0; i < voters; i++ ) {
	buffer[i].buffered = false;
    }

    for( int i = 0; i < voters; i++ ) {
	cout << left << setw(5) << "Voter" << setw(3) << left << i;
    }

    cout << endl;

    for( int i = 0; i < voters; i++ ) {
	cout << "======  ";
    }

    cout << endl;
}

Printer::~Printer() {
    cout << "=================" << endl;
    cout << "All tours started" << endl;

    delete [] buffer;
}

void Printer::flush() {
    for( int i = 0; i < voter; i++ ) {
	if( buffer[i].buffered ) {
	    switch( buffer[i].state ) {
		case 'S': case 'C': case 'b':
		    cout << (char)buffer[i].state;
		    break;
		case 'V':
		    cout << (char)buffer[i].state << " " << (unsigned int)buffer[i].vote;
		    break;
		case 'B': case 'U':
		    cout << (char)buffer[i].state << " " << buffer[i].numBlocked;
		    break;
		default:
		    break;
	    }
	    buffer[i].buffered = false;
	}
	if( i != voter - 1 ) cout << '\t';
    }
    cout << endl;
}

void Printer::flush_finish( unsigned int id, bool vote ) {
    for( int i = 0; i < voter; i++ ) {
	if( i == id ) {
	    cout << (char)Voter::Finished << " " << (unsigned int)vote;
	} else {
	    cout << "...";
	}
	cout << '\t';
    }
    cout << endl;
}

void Printer::print( unsigned int id, Voter::States state ) {
    if( buffer[id].buffered ) {
	flush();
    }
    buffer[id].state = state;
    buffer[id].buffered = true;
}

void Printer::print( unsigned int id, Voter::States state, bool vote ) {
    if( buffer[id].buffered ) {
	flush();
    }

    if( state == Voter::Finished ) {
	flush_finish( id, vote );
	return;
    }

    buffer[id].state = state;
    buffer[id].vote = vote;
    buffer[id].buffered = true;
}

void Printer::print( unsigned int id, Voter::States state, unsigned int numBlocked ) {
    if( buffer[id].buffered ) {
	flush();
    }
    buffer[id].state = state;
    buffer[id].numBlocked = numBlocked;
    buffer[id].buffered = true;
}
